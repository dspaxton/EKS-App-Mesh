AWSTemplateFormatVersion: 2010-09-09
Description: ECS Resources
Parameters:
  VPCID:
    Description: VPCID
    Type: String
    Default: "myvpc"
  PrivateSubnet1:
    Description: Private Subnet One
    Type: String
  PrivateSubnet2:
    Description: Private Subnet Two
    Type: String
  PrivateSubnet3:
    Description: Private Subnet Three
    Type: String
  PrivateNamespace:
    Description: Private Namespace for CloudMap
    Type: String


Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "ECSCluster"


  TaskIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess

  TaskExecutionIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:DescribeRepositories"
                  - "ecr:ListImages"
                  - "ecr:DescribeImages"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  ECSServiceLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 7

  Frontendv3SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Access the Frontendv3 containers"
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - CidrIp: 10.228.0.0/16
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080

  ECSInstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Access the ECS Instances"
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - CidrIp: 10.228.0.0/16
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22

  Frontendv3ServiceDiscoveryEntry:
    Type: AWS::ServiceDiscovery::Service
    Properties:
        Name: frontendv3
        DnsConfig:
            DnsRecords:
                - Type: A
                  TTL: "10"
            NamespaceId: !Ref 'PrivateNamespace'
        HealthCheckCustomConfig:
            FailureThreshold: '1'

  TaskDefinitionFrontendv3:
      Type: AWS::ECS::TaskDefinition
      Properties:
          Family: frontendv3
          NetworkMode: awsvpc
          RequiresCompatibilities:
              - FARGATE
          TaskRoleArn: !Ref TaskIamRole
          ExecutionRoleArn: !Ref 'TaskExecutionIamRole'
          Cpu: 256
          Memory: 512
          ProxyConfiguration:
              Type: APPMESH
              ContainerName: envoy
              ProxyConfigurationProperties:
                  - Name: IgnoredUID
                    Value: '1337'
                  - Name: ProxyIngressPort
                    Value: '15000'
                  - Name: ProxyEgressPort
                    Value: '15001'
                  - Name: AppPorts
                    Value: '8080'
                  - Name: EgressIgnoredIPs
                    Value: '169.254.170.2,169.254.169.254'
          ContainerDefinitions:
              - Name: frontendv3
                Essential: true
                Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/frontendv3'
                PortMappings:
                  -
                    ContainerPort: 8080
                LogConfiguration:
                  LogDriver: awslogs
                  Options:
                      awslogs-group: !Ref AWS::StackName
                      awslogs-region: !Ref AWS::Region
                      awslogs-stream-prefix: frontendv3
                DependsOn:
                    - ContainerName: envoy
                      Condition: HEALTHY
              - Name: xray
                Image: amazon/aws-xray-daemon
                Essential: true
                User: '1337'
                LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: frontendv3
              - Name: envoy
                Image:  !Sub '840364872350.dkr.ecr.${AWS::Region}.amazonaws.com/aws-appmesh-envoy:v1.15.0.0-prod'
                Essential: true
                User: '1337'
                DependsOn:
                    - ContainerName: xray
                      Condition: START
                Ulimits:
                    - Name: nofile
                      HardLimit: 15000
                      SoftLimit: 15000
                HealthCheck:
                    Command:
                        - CMD-SHELL
                        - curl -s http://localhost:9901/server_info | grep state | grep -q LIVE
                    Interval: 5
                    Timeout: 10
                    Retries: 10
                LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: frontendv3
                Environment:
                    - Name: ENVOY_LOG_LEVEL
                      Value: debug
                    - Name: ENABLE_ENVOY_XRAY_TRACING
                      Value: '1'
                    - Name: ENABLE_ENVOY_STATS_TAGS
                      Value: '1'
                    - Name: ENABLE_ENVOY_DOG_STATSD
                      Value: '1'
                    - Name: APPMESH_VIRTUAL_NODE_NAME
                      Value: 'mesh/my-mesh/virtualNode/frontend-v3'

  ServiceECSFrontend:
      Type: AWS::ECS::Service
      Properties:
          LaunchType: FARGATE
          Cluster: !Ref ECSCluster
          DesiredCount: 1
          # ServiceName: frontendv3
          ServiceRegistries:
            - RegistryArn: !GetAtt Frontendv3ServiceDiscoveryEntry.Arn
          TaskDefinition: !Ref 'TaskDefinitionFrontendv3'
          # LoadBalancers:
          # - ContainerName: envoy
          #   ContainerPort: 80
          #   TargetGroupArn: !Ref YelbTargetGroup
          NetworkConfiguration:
              AwsvpcConfiguration:
                  AssignPublicIp: DISABLED
                  Subnets: [ !Ref 'PrivateSubnet1' , !Ref 'PrivateSubnet2', !Ref 'PrivateSubnet3'  ]
                  SecurityGroups: [!Ref 'Frontendv3SecurityGroup' ]

  FrontendV3VirtualNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: my-mesh
      VirtualNodeName: frontend-v3
      Spec:
        Listeners:
          - PortMapping:
              Port: 8080
              Protocol: http
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: private-example.com
            ServiceName: frontendv3
        Backends:
          - VirtualService:
              VirtualServiceName: "db.private-example.com"
