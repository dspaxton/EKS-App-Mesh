AWSTemplateFormatVersion: 2010-09-09
Description: EKS VPC
Parameters:
  VPCCIDR:
    Description: Overall CIDR block for VPCCIDR
    Type: String
    Default: 10.228.0.0/16
  PrivateSubnetBlocks:
    Description: "Comma-delimited list of three CIDR Blocks for Private Use"
    Type: CommaDelimitedList
    Default: "10.228.0.0/24, 10.228.10.0/24, 10.228.20.0/24"
  PublicSubnetBlocks:
    Description: "Comma-delimited list of three CIDR Blocks for Public Use"
    Type: CommaDelimitedList
    Default: "10.228.1.0/24, 10.228.11.0/24, 10.228.21.0/24"


Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: EKS VPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Internet Gateway
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Ref PublicSubnetBlocks]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 1
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}'
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: 1
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Ref PrivateSubnetBlocks]
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 1
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}'
          Value: shared
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Ref PublicSubnetBlocks]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 2
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}'
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: 1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Ref PrivateSubnetBlocks]
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 2
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}'
          Value: shared
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Ref PublicSubnetBlocks]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '2'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 3
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}'
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: 1
  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Ref PrivateSubnetBlocks]
      AvailabilityZone: !Select
        - '2'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 3
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}'
          Value: shared
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable


  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2
  PrivateSubnetRouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3

  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT1:
    DependsOn: AttachGateway
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIP1.AllocationId'
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NATAZ1
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table1
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT1
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT2:
    DependsOn: AttachGateway
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIP2.AllocationId'
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NATAZ2
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table2
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT2
  EIP3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT3:
    DependsOn: AttachGateway
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIP3.AllocationId'
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: NATAZ3
  PrivateRouteTable3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table3
  PrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT3
      
  DocumentDBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DocumentDB Ingress
      GroupName: DocumentDBSG
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 27017
        ToPort: 27017
        CidrIp: !Ref VPCCIDR
        
  DocDBClusterPG:
    Type: AWS::DocDB::DBClusterParameterGroup
    Properties:
       Description: "DocumentDB Demo ParameterGroup"
       Family: "docdb3.6"
       Name: !Sub '${AWS::StackName}-DocDBPG'
       Parameters: 
            tls: "disabled"
            
  DocDBSubnetGroup: 
    Type: AWS::DocDB::DBSubnetGroup
    Properties: 
       DBSubnetGroupDescription: "DocDB SubnetGroup"
       SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
          
  DocDBCluster: 
    Type: "AWS::DocDB::DBCluster"
    Properties: 
       BackupRetentionPeriod : 8
       DBClusterIdentifier : !Sub '${AWS::StackName}-DocDB'
       DBClusterParameterGroupName : !Ref DocDBClusterPG
       DBSubnetGroupName : !Ref DocDBSubnetGroup
       MasterUsername : "mongoadmin"
       MasterUserPassword : "demoadminpass"
       Port : "27017"
       PreferredBackupWindow : "07:34-08:04"
       PreferredMaintenanceWindow : "sat:04:51-sat:05:21"
       StorageEncrypted : true
       VpcSecurityGroupIds: 
        - !Ref DocumentDBSG

  DocDBInstance1:
    Type: "AWS::DocDB::DBInstance"
    Properties:
       AutoMinorVersionUpgrade: true
       DBClusterIdentifier: !Ref DocDBCluster
       DBInstanceClass: "db.r5.large"
       DBInstanceIdentifier: !Sub '${AWS::StackName}-DocDB-1'
       PreferredMaintenanceWindow: "sat:06:54-sat:07:24"
  DocDBInstance2:
    Type: "AWS::DocDB::DBInstance"
    Properties:
       AutoMinorVersionUpgrade: true
       DBClusterIdentifier: !Ref DocDBCluster
       DBInstanceClass: "db.r5.large"
       DBInstanceIdentifier:  !Sub '${AWS::StackName}-DocDB-2'
       PreferredMaintenanceWindow: "sat:06:54-sat:07:24"
  DocDBInstance3:
    Type: "AWS::DocDB::DBInstance"
    Properties:
       AutoMinorVersionUpgrade: true
       DBClusterIdentifier: !Ref DocDBCluster
       DBInstanceClass: "db.r5.large"
       DBInstanceIdentifier:  !Sub '${AWS::StackName}-DocDB-3'
       PreferredMaintenanceWindow: "sat:06:54-sat:07:24"
  
  CloudMapNamespace:
    Type: 'AWS::ServiceDiscovery::PrivateDnsNamespace'
    Properties:
      Description: AWS Cloud Map private DNS namespace for resources for example.com website
      Vpc: !Ref VPC
      Name: private-example.com


Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
  AZ1:
    Description: Availability Zone 1
    Value: !GetAtt
      - PublicSubnet1
      - AvailabilityZone
  AZ2:
    Description: Availability Zone 2
    Value: !GetAtt
      - PublicSubnet2
      - AvailabilityZone
  AZ3:
    Description: Availability Zone 3
    Value: !GetAtt
      - PublicSubnet3
      - AvailabilityZone
  PrivateSubnet1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2
  PrivateSubnet3:
    Description: Private Subnet 3
    Value: !Ref PrivateSubnet3
  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2
  PublicSubnet3:
    Description: Public Subnet 3
    Value: !Ref PublicSubnet3
  DocumentDBSG:
    Description: DocumentDB Security Group
    Value: !Ref DocumentDBSG
  DocumentDBEndpoint:
    Description: DocumentDB Endpoint
    Value: !GetAtt
      - DocDBCluster
      - Endpoint
  CloudMapNamespace:
    Value: !Ref CloudMapNamespace